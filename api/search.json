[{"id":"edb3d07193401a512e876858ee38ca53","title":"R语言技巧","content":"设置python加载包太慢1234 pip3 install torch(包名)  -i http://pypi.douban.com/simple --trusted-host pypi.douban.compython hyperparameter_optimization.py --gpu 0 --data_path ../data/traindata.csv --features_path ../data/traindata-feat.npy --no_features_scaling --dataset_type classification  --num_iters 20 --config_save_path hyperopt_it20.json \n\n换源以及常用R包123456789101112131415161718192021222324252627282930313233343536373839404142##----- Information ------##------ Author: sunshine ------####------ Date: Tue Mar 15 09:22:19 2022 ------##     ##date()   timestamp()##------ Last_Edit_Time: ------####------ Last_Editors:sunshine ------####------ Description: deal with the drugbank file------####------ File_Path: &quot;D:/Aliyun/3.药物数据文档/药物数据文档/预测药物集合/drugbank&quot;------##rm(list = ls()) #清除变量gc() #释放内存options(stringsAsFactors = FALSE)options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirrorpacman::p_load(&quot;rio&quot;,&quot;magrittr&quot;,&quot;tidyverse&quot;,&quot;stringr&quot;,&quot;tibble&quot;) #一般使用 tibble : add_columpacman::p_load(&quot;rio&quot;,&quot;magrittr&quot;,&quot;tidyverse&quot;,&quot;stringr&quot;,&quot;tibble&quot;,&quot;xml2&quot;,&quot;rvest&quot;,               &quot;dplyr&quot;,&quot;raster&quot;,&quot;devtools&quot;,&quot;Rselenuim&quot;,&quot;Rwebdriver&quot;) #爬虫使用pacman::p_load(&quot;rio&quot;,&quot;magrittr&quot;,&quot;tidyverse&quot;,&quot;stringr&quot;,&quot;tibble&quot;,&quot;data.table&quot;,               &quot;survminer&quot;,&quot;survival&quot;,&quot;futile.logger&quot;,&quot;ggrisk&quot;,&quot;pheatmap&quot;,               &quot;ggplot2&quot;,&quot;ggstatsplot&quot;,&quot;ggsci&quot;,&quot;timeROC&quot;,&quot;maftools&quot;,&quot;edgeR&quot;,               &quot;DESeq2&quot;,&quot;FactoMineR&quot;,&quot;factoextra&quot;,&quot;clusterProfiler&quot;,&quot;org.Hs.eg.db&quot;,               &quot;org.Mm.eg.db&quot;,&quot;stringi&quot;,&quot;patchwork&quot;,&quot;VennDiagram&quot;,&quot;RColorBrewer&quot;,               &quot;ggplotify&quot;,&quot;GEOquery&quot;,&quot;TCGAbiolinks&quot;,&quot;SummarizedExperiment&quot;) # TCGA, GEO使用rm(a,b,c);gc() #清除Rstudio中的变量，并释放其所占用的内存# library(GEOquery)# getGEOSuppFiles(&quot;GSE136001&quot;)browseVignettes(&quot;ChAMP&quot;)###查看说明RSiteSearch(&quot;RSS&quot;);//返回对RSS的网络解释tiff(&quot;基于肾透明细胞癌生存曲线.tif&quot;,width = 1800,height = 1600,units = &quot;px&quot;,res=300)dev.off()pdf(&quot;基于肾透明细胞癌膀胱癌KM生存曲线.pdf&quot;,width=8,height=6)dev.off()apply(dfll, 1, function(x) file.rename(x[2],paste0(x[3],&quot;.zip&quot;)))\n\nmonocle2R包报错修改：解决monocle中orderCells报错的一波三折 · Issue #2762 · ixxmu&#x2F;mp_duty (github.com)手动下载monocle2的tar.gz文件，将其解压为monocle文件，在monocle文件夹下新建一个Rproj文件，双击Rproj文件，在其中找到order_cell.R文件，打开脚本，将1620和1621行的代码从\nif(class(projection) !&#x3D; ‘matrix’)\nprojection &lt;- as.matrix(projection)\n修改为 projection &lt;- as.matrix(projection)\n保存脚本，在R studio 的Console的位置用.libPaths()查找出R包的安装位置如下：\n.libPaths()\n[1] “E:&#x2F;Software_install&#x2F;R&#x2F;R-4.2.2&#x2F;library”\n根据这个路径找到library文件夹（如果是mac电脑，直接将以上文件路径复制到聚焦搜索框就能快速定位到文件位置）\n将改好的monocle文件拖进library文件夹后，在 R studio,中输入以下命令来加载这个包\ndevtools::load_all(“E:&#x2F;Software_install&#x2F;R&#x2F;R-4.2.2&#x2F;library&#x2F;monocle”)\nFirst, change the code of monocle&#x2F;R&#x2F;order_cell.R in function project2MST()\nfrom\nif(class(projection) != &#39;matrix&#39;) projection &lt;- as.matrix(projection)\nto\nprojection &lt;- as.matrix(projection)\nSecond, modified the code of &#x2F; monocle&#x2F;R &#x2F;BEAM.R\nfrom:\n12if (progenitor_method == &quot;duplicate&quot;) &#123; &#125;else if (progenitor_method == &quot;sequential_split&quot;) &#123; &#125;\n\nto:\n12if (&#x27;duplicate&#x27; %in% progenitor_method)&#123;&#125;else if(&#x27;sequential_split&#x27; %in% progenitor_method)&#123;&#125;\n\nThird, modified the code of &#x2F; monocle&#x2F;R &#x2F;utils.R\nfrom:\nclass(x) %in% c(&quot;dgCMatrix&quot;, &quot;dgTMatrix&quot;)\nto:\nany(class(x) %in% c(&quot;dgCMatrix&quot;, &quot;dgTMatrix&quot;))\n导出高清图片常用1234tiff(&quot;基于肾透明细胞癌生存曲线.tif&quot;,width = 1800,height = 1600,units = &quot;px&quot;,res=300)dev.off()pdf(&quot;基于肾透明细胞癌膀胱癌KM生存曲线.pdf&quot;,width=8,height=6)dev.off()\n\n帮助12browseVignettes(&quot;ChAMP&quot;)###查看说明RSiteSearch(&quot;RSS&quot;);//返回对RSS的网络解释\n\napply家族套用12345678910111213https://www.zhihu.com/question/265169584apply(a, 1, function(x)&#123;    apply(x, 1, function(y)&#123;        apply(y, 1, function(z)&#123;             z=x+y;return(z)        &#125;)    &#125;)&#125;)1 : 按行计算 ，2 ：按列计算  apply(dfll, 1, function(x) file.rename(x[2],paste0(x[3],&quot;.zip&quot;)))#x[2] x[3]分别为dfll中一行的第2列和第3列\n\n最推荐的笔记软件推荐\n\n\n\n\n\n\n\n\n双链： 1、typora 2、obsidian 3、logseq 4、思源笔记 5、Roam Research 6、葫芦笔记 7、小书匠 8、CMD Markdown 9、Writeathon(卡片) 10、Heptabase(白板软件) 11、Roma Edit 12、Roma Note\n13、TiddlyWiki 、Athens 14、Trilium 15、Notion、FlowUs、Wolai\n笔记软件推荐\n\n\n\n\n\n\n\n\ntypora、obsidian、logseq、思源笔记、notion、marktext、sublime text、vscode、atom、幕布、flowus、语雀、飞书文档、wolai、getmind、小书匠、Rmarkdwon、onenote、RoamEdit、joplin、trilium、CMD Markdown、ghostwriter、StackEdit–在线\nLatex软件推荐\n\n\n\n\n\n\n\n\nOverleaf、vscode、atom、sublime text、TexPage、Slager、Rmarkdown\nMarkdown\n\n\n\n\n\n\n\n\ntypora, Simlenote, laverna,Boostnote, Inkdrop, CMD Markdown, 马克飞象, Yu Writer, 看云, 有道云笔记, 为知笔记, 蚂蚁笔记, Vnote, Mweb, Joplin, Zettlr, macdown, ulysses, marktext, ghostwriter, focused, byword, marked, Farbox, Notable, bear, iA writer, sublime,vscode,atom,Moeditor, Remarkable\n装机软件推荐\n\n\n\n\n\n\n\n\neverything、wox、酷我音乐、右键菜单管理、图吧工具箱、backiee、office2016、edge、chrome、幕布、typora、tabby、ikuuu、QQ、微信、vscode、sublime text、notepad、notepad++、pycharm、endnote、zotero、知云文献翻译、棵岩阅读、bookxnotepro、bandzip、7zip、IDM、\n设置文件标签1234567891011121314151617181920# TODO: 计算网络药理学作业# # Author: 苏阳光# Date 2021年11月7日################################################################################&#x27;##########  ---- Paragraph &lt;1&gt; ----  ###########  #&#x27; 核心目标：使用drug bank药物和靶点数据库生成网络（CytoScape）#&#x27; #&#x27;############ [21-10-07] ##############----- Information ------##------ Author: sunshine ------####------ Sat Apr 23 14:39:38 2022 ------##     ##date()   timestamp()##------ Last_Edit_Time: ------####------ Last_Editors:sunshine ------####------ Description: study tidyverse------####------ File_Path: ------##  getwd()\n\nKEGG富集失败 enrichKEGG12345install.packages(&quot;R.utils&quot;)library(R.utils)R.utils::setOption(&quot;clusterProfiler.download.method&quot;,&quot;auto&quot;)kegg&lt;-enrichKEGG(Gene, organism =&#x27;hsa&#x27;,keyType =&#x27;kegg&#x27;,pvalueCutoff=1,pAdjustMethod=&#x27;BH&#x27;,                  use_internal_data = FALSE)\n\nR语言注释以及生信R包安装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166GEO raw下载：library(GEOquery)getGEOSuppFiles(&quot;GSE150321&quot;)##----- Information ------##------ Author: sunshine ------####------ Date: Tue Mar 15 09:22:19 2022 ------##     ##date()   timestamp()##------ Last_Edit_Time: ------####------ Last_Editors:sunshine ------####------ Description: deal with the drugbank file------####------ File_Path: &quot;D:/Aliyun/3.药物数据文档/药物数据文档/预测药物集合/drugbank&quot;------###---- 换源 ----rm(list = ls())   options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirror#---- R包以及设置 ----options(stringsAsFactors = F)library(rio) # A Swiss-Army Knife for Data I/O # A Swiss-Army Knife for Data I/Olibrary(magrittr) # A Forward-Pipe Operator for Roptions(scipen = 800)#---- step 1 : 数据导入以及处理 ----### ---------------###### Create: Jianming Zeng### Date: 2019-04-02 21:59:01### Email: jmzeng1314@163.com### Blog: http://www.bio-info-trainee.com/### Forum:  http://www.biotrainee.com/thread-1376-1-1.html### CAFS/SUSTC/Eli Lilly/University of Macau### Update Log:   2019-04-02  second version###### ---------------## 强调，不是所有的R包都需要安装成功的。## 强调，不是所有的R包都需要安装成功的。## 强调，不是所有的R包都需要安装成功的。## 强调，不是所有的R包都需要安装成功的。## 失败就失败，大不了从头再来，卸载R语言，从新开始。## 强调，中国大陆的粉丝务必注意下载镜像。## 强调，管是什么电脑，都请务必安装好R及Rstudio哦# 所有的软件都安装在c盘哦，然后系统用户名最好是不要用中文，写代码最怕中文字符串哦！# 生信0基础第一步，下载R和Rstudio并且安装在自己的电脑上面。官网链接是 # - R: https://mirrors.tuna.tsinghua.edu.cn/CRAN/# - RStudio：https://www.rstudio.com/products/rstudio/download/#download # 如果你的网络不好，可以从我整理的网盘下载，链接：https://share.weiyun.com/5hW6VAA  密码：3fuhrmrm(list = ls()) #清空当前工作空间变量  options()$repos  #查看当前工作空间默认的下载包路径options()$BioC_mirror #查看使用BioCManager下载包的默认路径options(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;) # 指定使用BioCManager下载的路径options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;)) # 指定使用install.packages下载包的路径options()$repos options()$BioC_mirror# https://bioconductor.org/packages/release/bioc/html/GEOquery.htmlif (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE))  install.packages(&quot;BiocManager&quot;) #判断是否存在BiocManger包，没有的话下载该包#BiocManager::install(&quot;KEGG.db&quot;,ask = F,update = F)#BiocManager::install(c(&quot;GSEABase&quot;,&quot;GSVA&quot;,&quot;clusterProfiler&quot; ),ask = F,update = F)#BiocManager::install(c(&quot;GEOquery&quot;,&quot;limma&quot;,&quot;impute&quot; ),ask = F,update = F)#BiocManager::install(c(&quot;genefu&quot;,&quot;org.Hs.eg.db&quot;,&quot;hgu133plus2.db&quot; ),ask = F,update = F)#判断是否存在这些包，不存在的话安装这些包if(!require(&quot;KEGG.db&quot;)) BiocManager::install(&quot;KEGG.db&quot;,ask = F,update = F)if(!require(&quot;GSEABase&quot;)) BiocManager::install(&quot;GSEABase&quot;,ask = F,update = F)if(!require(&quot;GSVA&quot;)) BiocManager::install(&quot;GSVA&quot;,ask = F,update = F)if(!require(&quot;clusterProfiler&quot;)) BiocManager::install(&quot;clusterProfiler&quot;,ask = F,update = F)if(!require(&quot;GEOquery&quot;)) BiocManager::install(&quot;GEOquery&quot;,ask = F,update = F)if(!require(&quot;limma&quot;)) BiocManager::install(&quot;limma&quot;,ask = F,update = F)if(!require(&quot;impute&quot;)) BiocManager::install(&quot;impute&quot;,ask = F,update = F)if(!require(&quot;genefu&quot;)) BiocManager::install(&quot;genefu&quot;,ask = F,update = F)if(!require(&quot;org.Hs.eg.db&quot;)) BiocManager::install(&quot;org.Hs.eg.db&quot;,ask = F,update = F)if(!require(&quot;hgu133plus2.db&quot;)) BiocManager::install(&quot;hgu133plus2.db&quot;,ask = F,update = F)if(!require(&quot;ConsensusClusterPlus&quot;)) BiocManager::install(&quot;ConsensusClusterPlus&quot;,ask = F,update = F)BiocManager::install(c(&#x27;airway&#x27;,&#x27;DESeq2&#x27;,&#x27;edgeR&#x27;,&#x27;limma&#x27;),                     ask = F,update = F)if(! require(&quot;maftools&quot;)) BiocManager::install(&quot;maftools&quot;,ask = F,update = F)if(! require(&quot;genefilter&quot;)) BiocManager::install(&quot;genefilter&quot;,ask = F,update = F)if(! require(&quot;CLL&quot;)) BiocManager::install(&quot;CLL&quot;,ask = F,update = F)if(! require(&quot;org.Hs.eg.db&quot;)) BiocManager::install(&#x27;org.Hs.eg.db&#x27;,ask = F,update = F)if(! require(&quot;maftools&quot;)) BiocManager::install(&quot;maftools&quot;,ask = F,update = F)if(! require(&quot;RTCGA&quot;)) BiocManager::install(&quot;RTCGA&quot;,ask = F,update = F)if(! require(&quot;RTCGA.clinical&quot;)) BiocManager::install(&quot;RTCGA.clinical&quot;,ask = F,update = F)# https://bioconductor.org/packages/3.6/data/experiment/src/contrib/RTCGA.clinical_20151101.8.0.tar.gznif(! require(&quot;RTCGA.miRNASeq&quot;)) BiocManager::install(&quot;RTCGA.miRNASeq&quot;,ask = F,update = F)# 如果万一是 R3.4 版本之前的，请使用下面代码下载该项目所需要的包# source(&quot;https://bioconductor.org/BiocManager::install.R&quot;) # library(&#x27;BiocInstaller&#x27;) # options(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;) # BiocInstaller::BiocManager::install(&quot;GEOquery&quot;)# BiocInstaller::BiocManager::install(c(&quot;limma&quot;))# BiocInstaller::BiocManager::install(c(&quot;impute&quot;))options()$repos#install.packages(&#x27;WGCNA&#x27;)#install.packages(c(&quot;FactoMineR&quot;, &quot;factoextra&quot;))#install.packages(c(&quot;ggplot2&quot;, &quot;pheatmap&quot;,&quot;ggpubr&quot;))#判断是否存在这些包，不存在的话安装这些包if(!require(&quot;WGCNA&quot;)) install.packages(&quot;WGCNA&quot;,update = F,ask = F)if(!require(&quot;FactoMineR&quot;)) install.packages(&quot;FactoMineR&quot;,update = F,ask = F)if(!require(&quot;factoextra&quot;)) install.packages(&quot;factoextra&quot;,update = F,ask = F)if(!require(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;,update = F,ask = F)if(!require(&quot;pheatmap&quot;)) install.packages(&quot;pheatmap&quot;,update = F,ask = F)if(!require(&quot;ggpubr&quot;)) install.packages(&quot;ggpubr&quot;,update = F,ask = F)if(!require(&quot;glmnet&quot;)) install.packages(&quot;glmnet&quot;,update = F,ask = F)if(!require(&quot;randomForest&quot;)) install.packages(&quot;randomForest&quot;,update = F,ask = F)library(&quot;FactoMineR&quot;)library(&quot;factoextra&quot;)library(GSEABase)library(GSVA)library(clusterProfiler)library(genefu)library(ggplot2)library(ggpubr)library(hgu133plus2.db)library(limma)library(org.Hs.eg.db)library(pheatmap)install.packages(c(&quot;devtools&quot;,&quot;reshape2&quot;,&quot;pheatmap&quot;,                   &quot;ggplot2&quot;,&quot;ggfortify&quot;,&quot;stringr&quot;,                   &quot;survival&quot;,&quot;survminer&quot;,&quot;lars&quot;,                   &quot;glmnet&quot;,&quot;timeROC&quot;,&quot;ggpubr&quot;,                   &quot;randomForest&quot;,&quot;ROCR&quot;,&quot;Hmisc&quot;,                   &quot;caret&quot;,&quot;ggstatsplot&quot;,&quot;tableone&quot;, &quot;rio&quot;,&quot;magrittr&quot;,&quot;data.table&quot;,                   &quot;devtools&quot;,&quot;reshape2&quot;,&quot;randomForest&quot;))library(devtools) \n\nR爬虫Rselenuim动态爬虫1：北药提取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170# TODO: 北药提取# # Author: 苏阳光# Date 2022年7月27日################################################################################&#x27;##########  ---- Paragraph &lt;1&gt; ----  ###########  #&#x27; 核心目标：从数据库ETCM中提取所有的草药，并提取其所有的信息#&#x27; #&#x27;############ [22-07-27] ############rm(list = ls())   options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirrorlibrary(rio)drug&lt;- read.csv(&#x27;tableExport.csv&#x27;,encoding = &#x27;UTF-8&#x27;)#https://blog.csdn.net/abc200941410128/article/details/72511931#java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-4.0.0-alpha-1.jarlibrary(rvest)        # 为了read_html函数library(RSelenium)    # 为了使用JavaScript进行网页抓取drug$&#x27;Habitat in Chinese&#x27; &lt;- &#x27;&#x27;t_sleep &lt;- 2for (i in 1:dim(drug)[1]) &#123;###############连接Server并打开浏览器############################## 打开浏览器remDr &lt;- remoteDriver(browserName =&quot;chrome&quot;)remDr$open() ## 打开网页url &lt;-paste0(&#x27;http://www.tcmip.cn/ETCM/index.php/Home/Index/yc_details.html?id=&#x27;,i) remDr$navigate(url)Sys.sleep(t_sleep)# 提取页面webpage &lt;- read_html(remDr$getPageSource()[[1]][1])# 提取表格data_temp &lt;- webpage %&gt;% html_nodes(&quot;#table &gt; tbody &gt; tr &gt; td &gt; div&quot;) %&gt;% html_text(trim = T)drug[i,7] &lt;- data_temp[14]remDr$close() #打开浏览器&#125;write.csv(drug,file = &quot;tableExport1.csv&quot;)index&lt;- grep(&quot;黑龙江&quot;,drug$`Habitat in Chinese`) hei_drug&lt;- drug[index,]save(drug,hei_drug,file = &quot;drug.RData&quot;)rm(list = ls())   options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirrorlibrary(rio)load(&#x27;drug.RData&#x27;)#https://blog.csdn.net/abc200941410128/article/details/72511931#java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-4.0.0-alpha-1.jarlibrary(rvest)        # 为了read_html函数library(RSelenium)    # 为了使用JavaScript进行网页抓取index &lt;- row.names(hei_drug)t_sleep &lt;- 2dat &lt;- data.frame()for (i in 1:length(index)) &#123;  ###############连接Server并打开浏览器############################  ## 打开浏览器  remDr &lt;- remoteDriver(browserName =&quot;chrome&quot;)  remDr$open()   ## 打开网页  url &lt;-paste0(&#x27;http://www.tcmip.cn/ETCM/index.php/Home/Index/yc_details.html?id=&#x27;,index[i])   remDr$navigate(url)  Sys.sleep(t_sleep)  # 提取页面  webpage &lt;- read_html(remDr$getPageSource()[[1]][1])  # 提取表格  data_temp &lt;- webpage %&gt;% html_nodes(&quot;#table &gt; tbody &gt; tr &gt; td &gt; div&quot;) %&gt;% html_text(trim = T)  data_temp1 &lt;- webpage %&gt;% html_nodes(&quot;#table &gt; tbody &gt; tr:nth-child(16) &gt; td:nth-child(2)&quot;) %&gt;% html_text(trim = T)  data_temp&lt;- append(x = data_temp, data_temp1, after = 31)  mm = matrix(data_temp, nrow=2, ncol=20, byrow=F) %&gt;% as.data.frame()  colnames(mm) &lt;- mm[1,]  mm &lt;- mm[-1,]  row.names(mm) &lt;- NULL  dat&lt;- rbind(dat,mm)  remDr$close() #打开浏览器&#125;write.csv(dat,file = &quot;tableExport2.csv&quot;)save(drug,hei_drug,dat,file = &quot;drug1.RData&quot;)###提取化合物对应靶点rm(list = ls())   options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirrorlibrary(rio)load(&#x27;drug1.RData&#x27;)#https://blog.csdn.net/abc200941410128/article/details/72511931#java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-4.0.0-alpha-1.jarlibrary(rvest)        # 为了read_html函数library(RSelenium)    # 为了使用JavaScript进行网页抓取index &lt;- row.names(hei_drug)t_sleep &lt;- 2data1 &lt;- data.frame()for (i in 1:length(index)) &#123;  ###############连接Server并打开浏览器############################  ## 打开浏览器  remDr &lt;- remoteDriver(browserName =&quot;chrome&quot;)  remDr$open()   ## 打开网页  url &lt;-paste0(&#x27;http://www.tcmip.cn/ETCM/index.php/Home/Index/yc_details.html?id=&#x27;,index[i])   remDr$navigate(url)  Sys.sleep(t_sleep)  # 提取页面  webpage &lt;- read_html(remDr$getPageSource()[[1]][1])  compoud_name&lt;- webpage %&gt;% html_nodes(&quot;#table &gt; tbody &gt; tr:nth-child(12) &gt; td:nth-child(2) &gt; div &gt; a&quot;) %&gt;% html_text(trim = F)  compoud_addres&lt;- paste0(&#x27;http://www.tcmip.cn&#x27;,webpage %&gt;% html_nodes(&quot;#table &gt; tbody &gt; tr:nth-child(12) &gt; td:nth-child(2) &gt; div &gt; a&quot;) %&gt;% html_attr(name = &#x27;href&#x27;))  remDr$close() #关闭浏览器  dat1 &lt;- data.frame()  for(j in 1:length(compoud_name))&#123;    ###############连接Server并打开浏览器############################    ## 打开浏览器    remDr &lt;- remoteDriver(browserName =&quot;chrome&quot;)    remDr$open()     ## 打开网页    url &lt;-compoud_addres[j]    remDr$navigate(url)    Sys.sleep(t_sleep)    # 提取页面    webpage &lt;- read_html(remDr$getPageSource()[[1]][1])    target_name&lt;- webpage %&gt;% html_nodes(&quot;#table &gt; tbody &gt; tr &gt; td &gt; div&quot;) %&gt;% html_text(trim = F)    mm = matrix(target_name, nrow=2, ncol=33, byrow=F) %&gt;% as.data.frame()    colnames(mm) &lt;- mm[1,]    mm &lt;- mm[-1,]    row.names(mm) &lt;- NULL    dat1&lt;- rbind(dat1,mm)    remDr$close() #关闭浏览器  &#125;  data1&lt;- rbind(data1,dat1)&#125;\n\nRselenuim动态爬虫2：DisGeNet_covidhttps://zhuanlan.zhihu.com/p/31905460##----- Information ------##------ Author: sunshine ------####------ Date: Thu Apr 28 09:21:49 2022 ------##     ##date()   timestamp()##------ Last_Edit_Time: ------####------ Last_Editors:sunshine ------####------ Description: R scarper------####------ File_Path: &quot;D:/R-scarpy&quot;------###https://blog.csdn.net/weixin_40628687/article/details/78971934#https://www.i4k.xyz/article/weixin_40628687/78998740# 一、RSelenium包和Rwebdriver包的下载安装# RSelenium包可以从CRAN直接下载安装，Rwebdriver包则需要从github上下载，代码如下（要先安装devtools包）：# java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-4.0.0-alpha-1.jarrm(list = ls())   # options()$repos # options()$BioC_mirror# options(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)# options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))# options()$repos # options()$BioC_mirror###方法一library(&quot;xml2&quot;)library(&quot;rvest&quot;)library(&quot;dplyr&quot;)library(&quot;stringr&quot;)library(magrittr)library(raster)library(devtools)  library(RSelenium)# library(&quot;devtools&quot;)# library(&quot;githubinstall&quot;)# install_github(&quot;crubba/Rwebdriver&quot;)library(Rwebdriver)#在终端中运行这一行代码，保证#java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-4.0.0-alpha-1.jar#连接ServerremDr &lt;- remoteDriver(remoteServerAddr = &quot;localhost&quot;                      , port = 4444 #这个port与上面保持一致                      , browserName = &quot;chrome&quot;)## 打开浏览器#remDr &lt;- remoteDriver(browserName =&quot;chrome&quot;)remDr$open() ## 打开网页url &lt;-&#x27;https://www.disgenet.org/covid/genes/summary/&#x27;remDr$navigate(url)##设置每页展示200个xpath11 &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_length&quot;]/label/select/option[5]&#x27;selectBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                               value = xpath11)selectBtn$clickElement()#等待30st_sleep &lt;- 30Sys.sleep(t_sleep)info &lt;- data.frame()webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp)####2xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[3]/a&#x27; #paste0(&#x27;//*[@id=&quot;DataTables_Table_0_paginate\\&quot;]/ul/li[&#x27;,7,&#x27;]/a&#x27;)nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####3xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[4]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####4xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[5]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####5xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####6xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####7xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####8xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####9xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[7]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####10xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[8]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)covid_genesummary_info &lt;- na.omit(info)library(rio)export(covid_genesummary_info,file = &quot;covid_genesummary_info.txt&quot;)save(covid_genesummary_info,file = &quot;covid_genesummary_info.RData&quot;)###方法二rm(list = ls())   library(&quot;xml2&quot;)library(&quot;rvest&quot;)library(&quot;dplyr&quot;)library(&quot;stringr&quot;)library(magrittr)library(raster)library(devtools)  library(RSelenium)# library(&quot;devtools&quot;)# library(&quot;githubinstall&quot;)# install_github(&quot;crubba/Rwebdriver&quot;)library(Rwebdriver)#在终端中运行这一行代码，保证#java -Dwebdriver.chrome.driver=chromedriver.exe -jar selenium-server-standalone-4.0.0-alpha-1.jar#连接ServerremDr &lt;- remoteDriver(remoteServerAddr = &quot;localhost&quot;                      , port = 4444 #这个port与上面保持一致                      , browserName = &quot;chrome&quot;)## 打开浏览器#remDr &lt;- remoteDriver(browserName =&quot;chrome&quot;)remDr$open() ## 打开网页url &lt;-&#x27;https://www.disgenet.org/covid/genes/summary/&#x27;remDr$navigate(url)##设置每页展示200个xpath11 &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_length&quot;]/label/select/option[5]&#x27;selectBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                               value = xpath11)selectBtn$clickElement()#等待30st_sleep &lt;- 60Sys.sleep(t_sleep)info &lt;- data.frame()webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp)xpath_info &lt;- c(&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[3]/a&#x27;                ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[4]/a&#x27;                ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[5]/a&#x27;                ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27;                 ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27;                 ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27;                 ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27;                 ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[7]/a&#x27;                 ,&#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[8]/a&#x27; )for (i in 1:length(xpath_info)) &#123;  xpath &lt;- xpath_info[i]  nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                               value = xpath)  nextBtn$clickElement()  t_sleep1 &lt;- 120  Sys.sleep(t_sleep1)  webpage &lt;- read_html(remDr$getPageSource()[[1]][1])  webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()  # 提取表格  data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]  info &lt;- rbind(info,data_temp1)&#125;####3xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[4]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####4xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[5]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####5xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####6xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####7xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####8xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[6]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####9xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[7]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)####10xpath &lt;- &#x27;//*[@id=&quot;DataTables_Table_0_paginate&quot;]/ul/li[8]/a&#x27; nextBtn &lt;- remDr$findElement(using =&#x27;xpath&#x27;,                             value = xpath)nextBtn$clickElement()t_sleep1 &lt;- 60Sys.sleep(t_sleep1)webpage &lt;- read_html(remDr$getPageSource()[[1]][1])webpage %&gt;% html_nodes(&#x27;#DataTables_Table_0_paginate &gt; ul &gt; li.paginate_button.page-item.active &gt; a&#x27;) %&gt;% html_text(trim = T) %&gt;% print()# 提取表格data_temp1 &lt;- html_table(webpage, fill = T)[[2]][2:201,]info &lt;- rbind(info,data_temp1)covid_genesummary_info &lt;- na.omit(info)library(rio)export(covid_genesummary_info,file = &quot;covid_genesummary_info.txt&quot;)save(covid_genesummary_info,file = &quot;covid_genesummary_info.RData&quot;)\n\nR静态爬虫rvest pubmed：covid-19,deep learning,drug123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188rm(list = ls())   options()$repos options()$BioC_mirroroptions(BioC_mirror=&quot;https://mirrors.ustc.edu.cn/bioc/&quot;)options(&quot;repos&quot; = c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))options()$repos options()$BioC_mirror#https://cloud.tencent.com/developer/article/1865752#加载R包library(xml2)library(rvest)library(tidyverse)# 爬取2021年m6a文献,总共有811篇,显示200篇文献,爬取5次即可# url &lt;- c(&#x27;https://pubmed.ncbi.nlm.nih.gov/?term=m6a&amp;filter=years.2021-2021&amp;size=200&#x27;,#          &#x27;https://pubmed.ncbi.nlm.nih.gov/?term=m6a&amp;filter=years.2021-2021&amp;size=200&amp;page=2&#x27;,#          &#x27;https://pubmed.ncbi.nlm.nih.gov/?term=m6a&amp;filter=years.2021-2021&amp;size=200&amp;page=3&#x27;,#          &#x27;https://pubmed.ncbi.nlm.nih.gov/?term=m6a&amp;filter=years.2021-2021&amp;size=200&amp;page=4&#x27;,#          &#x27;https://pubmed.ncbi.nlm.nih.gov/?term=m6a&amp;filter=years.2021-2021&amp;size=200&amp;page=5&#x27;)# 或者这样也行url &lt;- &#x27;https://pubmed.ncbi.nlm.nih.gov/?term=%28%28COVID%29+AND+%28deep+learning%29%29+AND+%28drug%29&amp;size=200&#x27;# url &lt;- paste(root,1:5,sep = &#x27;&#x27;)# 示例，read_html 返回html格式的内容read_html(url,encoding = &#x27;utf-8&#x27;)## &#123;html_document&#125;## &lt;html lang=&quot;en&quot;&gt;## [1] &lt;head itemscope itemtype=&quot;http://schema.org/WebPage&quot; prefix=&quot;og: http://ogp.me/ns#&quot;&gt;\\n&lt;meta http-equiv ...## [2] &lt;body&gt;\\n\\n  \\n  \\n    &lt;noscript&gt;\\n  &lt;div class=&quot;no-script-banner&quot; id=&quot;no-script-banner&quot;&gt;\\n    &lt;div cla ...# 节点选择器read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(&#x27;#search-results &gt; section.search-results-list &gt; div.search-results-chunks &gt; div &gt; article:nth-child(2) &gt; div.docsum-wrap &gt; div.docsum-content &gt; a&#x27;)## &#123;xml_nodeset (1)&#125;## [1] &lt;a class=&quot;docsum-title&quot; href=&quot;/32749190/&quot; ref=&quot;linksrc=docsum_link&amp;amp;article_id=32749190&amp;amp;ordinalpos=1&amp;amp;page=1&quot; data-ga-category=&quot;result_ ...read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(&#x27;#search-results &gt; section.search-results-list &gt; div.search-results-chunks &gt; div &gt; article:nth-child(2) &gt; div.docsum-wrap &gt; div.docsum-content &gt; a&#x27;) %&gt;%  html_text()## [1] &quot;\\n                Comprehensive analysis of the transcriptome-wide m6A methylome in colorectal cancer by MeRIP sequencing.\\n              &quot;# 加上trim = T 参数简洁化内容read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(&#x27;#search-results &gt; section.search-results-list &gt; div.search-results-chunks &gt; div &gt; article:nth-child(2) &gt; div.docsum-wrap &gt; div.docsum-content &gt; a&#x27;) %&gt;%  html_text(trim = T)## [1] &quot;Comprehensive analysis of the transcriptome-wide m6A methylome in colorectal cancer by MeRIP sequencing.&quot;# 相对路径read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(xpath = &#x27;//*[@id=&quot;search-results&quot;]/section[1]/div[1]/div/article[1]/div[2]/div[1]/a&#x27;) %&gt;%  html_text(trim = T)## [1] &quot;Comprehensive analysis of the transcriptome-wide m6A methylome in colorectal cancer by MeRIP sequencing.&quot;# 绝对路径read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(xpath = &#x27;/html/body/main/div[9]/div[2]/section[1]/div[1]/div/article[1]/div[2]/div[1]/a&#x27;) %&gt;%  html_text(trim = T)## [1] &quot;Comprehensive analysis of the transcriptome-wide m6A methylome in colorectal cancer by MeRIP sequencing.&quot;# 节点名称read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(&#x27;.docsum-title&#x27;) %&gt;%  html_text(trim = T)## [1] &quot;Comprehensive analysis of the transcriptome-wide m6A methylome in colorectal cancer by MeRIP sequencing.&quot;## [2] &quot;RNA m6A methylation promotes the formation of vasculogenic mimicry in hepatocellular carcinoma via Hippo pathway.&quot;## [199] &quot;Main N6-Methyladenosine Readers: YTH Family Proteins in Cancers.&quot;## [200] &quot;FTO overexpression inhibits apoptosis of hypoxia/reoxygenation-treated myocardial cells by regulating m6A modification of Mhrt.&quot;# 批量提取文章标题title &lt;- c()for (i in url) &#123;  title &lt;- c(title,read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(&quot;.docsum-title&quot;) %&gt;% html_text(trim = T))&#125;# 查看数量length(title)## [1] 813# 2、爬取文章作者author &lt;- c()for (i in url) &#123;  author &lt;- c(author,read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;%                html_nodes(&#x27;.full-authors&#x27;) %&gt;%                html_text())&#125;# 查看数量length(author)## [1] 813read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(&#x27;.docsum-title&#x27;) %&gt;%  html_attrs() %&gt;% head()read_html(url[1],encoding = &#x27;utf-8&#x27;) %&gt;%  html_nodes(&#x27;.docsum-title&#x27;) %&gt;%  html_attr(name = &#x27;href&#x27;) %&gt;% head()## [1] &quot;/32749190/&quot; &quot;/32920668/&quot; &quot;/32821938/&quot; &quot;/33314339/&quot; &quot;/33070036/&quot; &quot;/33156926/&quot;## 批量获取文章链接# 3、爬取文章地址,地址是https://pubmed.ncbi.nlm.nih.gov/加上爬取的编号web &lt;- c()for (i in url) &#123;  web &lt;- c(web,read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(&#x27;.docsum-title&#x27;) %&gt;% html_attr(name = &#x27;href&#x27;))&#125;# 查看数量length(web)## [1] 813# 连接成网址web_link &lt;- paste(&#x27;https://pubmed.ncbi.nlm.nih.gov&#x27;,web,sep = &#x27;&#x27;)web_link## [1] &quot;https://pubmed.ncbi.nlm.nih.gov/32749190/&quot; &quot;https://pubmed.ncbi.nlm.nih.gov/32920668/&quot; &quot;https://pubmed.ncbi.nlm.nih.gov/32821938/&quot;## [4] &quot;https://pubmed.ncbi.nlm.nih.gov/33314339/&quot; &quot;https://pubmed.ncbi.nlm.nih.gov/33070036/&quot; &quot;https://pubmed.ncbi.nlm.nih.gov/33156926/&quot;# 4、爬取文章摘要abstract &lt;- list()link &lt;- c()a=1for (i in web_link) &#123;  # 根据节点相对路径提取  # abstract[[i]] &lt;- read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(xpath = &#x27;//*[@id=&quot;enc-abstract&quot;]/p&#x27;) %&gt;% html_text(trim = T)  # 根据节点绝对路径提取  # abstract[[i]] &lt;- read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(xpath = &#x27;/html/body/div[5]/main/div[2]/div[2]/p&#x27;) %&gt;% html_text(trim = T)  # 根据节点名称提取  abstract[[i]] &lt;- read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(&quot;#enc-abstract &gt; p&quot;) %&gt;% html_text(trim = T)  #full-view-identifiers &gt; li:nth-child(2) &gt; span &gt; a  len &lt;- read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(&quot;#full-view-identifiers &gt; li:nth-child(3) &gt; span &gt; a&quot;) %&gt;% html_attr(&quot;href&quot;) %&gt;% length()  if(len==0)&#123;    link[a]&lt;-read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(&quot;#full-view-identifiers &gt; li:nth-child(2) &gt; span &gt; a&quot;) %&gt;% html_attr(&quot;href&quot;)   &#125;  else&#123;    link[a]&lt;-read_html(i,encoding = &#x27;utf-8&#x27;) %&gt;% html_nodes(&quot;#full-view-identifiers &gt; li:nth-child(3) &gt; span &gt; a&quot;) %&gt;% html_attr(&quot;href&quot;)   &#125;  a=a+1&#125;# 查看数量length(abstract)## [1] 813# 去除\\nabstract_clean &lt;- lapply(abstract, gsub,pattern = &#x27;\\n&#x27;,replacement = &#x27;&#x27;)# 连接为一个字符串对于多个部分的摘要abs_res &lt;- c()for(i in 1:147)&#123;  # 判断元素长度  len = length(abstract_clean[[i]])  if(len == 1)&#123;    # 如果只有一个摘要就保存    abs_res &lt;- c(abs_res,abstract_clean[[i]])  &#125;else&#123;    # 如果摘要格式有多个，连接成一个    abs_res &lt;- c(abs_res,paste(abstract_clean[[i]],sep = &#x27;-&#x27;,collapse = &#x27; &#x27;))  &#125;&#125;# 查看数量length(abs_res)## [1] 813# 5、保存爬取数据final_res &lt;- data.frame(Title = title,Author = author,web = web_link,doi = link,Abstract = abs_res)# 6、保存爬取的数据write.csv(final_res,file = &#x27;Covid_deeplearn_drug_Articles.csv&#x27;,row.names = F)\n\n","slug":"技巧","date":"2023-11-05T04:59:55.000Z","categories_index":"R语言技巧","tags_index":"R包,R技巧","author_index":"Sunshine"},{"id":"33ae415c73084ad9762360575ee05d6b","title":"分子表示与性质预测中的深度学习方法","content":"分子表示与性质预测中的深度学习方法Drug Discov Today | 分子表示与性质预测中的深度学习方法 (qq.com)\nDeep learning methods for molecular representation and property prediction - ScienceDirect\n2022年9月24日，青岛大学计算机科学技术学院李臻教授团队在Drug Discovery Today上发表文章“Deep learning methods for molecular representation and property prediction”。在论文中，作者回顾并总结了现有的分子表示与性质预测的深度学习方法，并讨论了深度学习方法在分子表示和性质预测方面的挑战和机遇。\n\n1 摘要\n随着人工智能方法的进步，计算机辅助药物设计（CADD）近年来发展迅速。有效的分子表示和准确的性质预测是CADD工作流程中的关键任务。在这篇综述中，作者总结了当前深度学习（deep learning）方法在分子表示和性质预测方面的应用。作者根据分子数据的格式（1D、2D和3D）对深度学习方法进行了分类。此外，文中还讨论了一些常见的深度学习模型，如集成学习和迁移学习，并分析了这些模型的可解释性方法。作者还着重研究了深度学习方法在分子表示和性质预测方面的挑战和机遇。\n2 介绍\n分子性质是许多领域的重要因素，包括化学、药物发现和医疗保健，且与量子力学、物理化学、生物物理、生理学等相关。计算机辅助方法能够快速预测分子性质，在具体实验开始前提供感兴趣分子的总体情况。这些方法被称为定量结构-活性关系（quantitative structure-activity relationship, QSAR）或定量结构-性质关系（quantitative structure-property relationship, QSPR）模型。此外，随着机器学习方法的发展，分子性质预测的准确性和速度也得到了提高，加速了其他相关应用，如药物-靶点亲和力预测和分子合成预测。特别是，作为机器学习的一个重要分支，深度学习方法受到了极大的关注。这种方法可以更精确地发现分子的结构与性质之间的关系。\n要研究分子性质的第一个问题是，如何表示一个分子。作者将分子表示方法划分为3类，1维表示、2维表示和3维表示。如图1所示，作者展示了药物imatinib mesylate的三种表示形式。\n\n图1 药物甲磺酸伊马替尼（imatinib mesylate，化学式：C30H35N7O4S）的1D、2D和3D表示。(a) 对于1D表示，图中展示了多种表示形式，包括SMILES、extended connectivity fingerprint (ECFP)、molecular access system (MACCS) fingerprint，和一些数学表示方法。(b) 对于2D表示，分子图可以被表示为两个矩阵，即邻接矩阵和特征矩阵。右边的分子图像(由RDKit生成)是另一种2D表示形式。(c) 图中展示了两种3D表示方法：一个3D分子图和一个3D分子网格表示(由PyMOL生成)。\n3 深度学习方法\n根据表示分子的形式不同，作者将深度学习分为8类：\n\n基于序列的方法\n基于图(graph)的方法\n基于图像(image)的方法\n基于3D图(3D graph)的方法\n基于3D网格(3D grid)的方法\n基于混合数据的方法和集成学习\n迁移学习、多任务学习和元学习\n分子性质预测中可解释的深度学习方法\n\n下面分别介绍这些方法。\n3.1 基于序列的方法\nSMILES是描述分子最直接、最简单的方法。它类似于自然语言，其中每个原子都是句子中的一个词。鉴于自然语言处理（natural language processing, NLP）领域的快速发展，NLP方法可以应用于SMILES序列的嵌入。作者接着总结了研究者开发的多种基于序列的方法，包括：数据增广方法、卷积神经网络方法、循环神经网络方法、子结构学习方法和基于序列的自监督学习方法等。图2也展示了基于SMILES的两种类型的自监督学习方法。\n\n图2 基于SMILES的不同类型的自监督学习（self-supervised learning）方法。(a) 基于transformer(BERT)的双向编码表示。SMILES序列被用作输入，并随机mask一些原子。然后训练语言模型来预测这些被mask的字符，进行表示学习。(b) 基于翻译模型的方法。该模型将输入的SMILES序列变换为另一种类型的序列。编码器编码的隐特征被用作分子表示。\n3.2 基于图的方法\n图是一种更直接的结构，可以存储和表示大多数结构信息。在图模型中，原子被表示为节点，化学键被表示为边，每个节点都有自己的特征。在图数据的帮助下，分子内的结构信息可使用GCNs提取。GCNs能够捕获有关连接节点之间关系的信息。一般来说，GCN有两种类型：空域卷积和频谱卷积。前者通过在空域中使用特定的消息传递规则收集相邻节点的信息来更新每个节点的特征。后者通过对拉普拉斯矩阵进行特征值分解，将图数据转换为谱域提取特征。接着，作者回顾了领域内的相关方法，包括谱域GCN模型、空域GCN模型、基于树的方法和基于图的自监督学习方法等。图3展示了基于图的三种不同类型的自监督学习方法。\n\n图3 使用图的不同类型的自监督学习方法。(a) 对比自监督L：使用数据增强方法，如对正样本对的节点drop、边drop和子图替换，而对负样本对随机选择其他增强图。(b) 生成自监督：通过编码器-解码器模型重构输入，以获取用于表示的隐特征。(c) 预测自监督：随机mask一些节点或边，让模型预测结果；通过这样做，该模型能够学习到隐特征并生成有效的分子表示。\n3.3 基于图像的方法\n深度学习方法在图像处理领域取得了巨大成功，这也为QSAR&#x2F;QSPR的研究奠定了基础。更具体地说，分子可以转换成图像，因此传统的深度学习模型可以用于QSAR&#x2F;QSPR任务，其中CNN是最广泛用于分子特征提取的。\n对于基于图像生成的方法，最简单的方法是直接使用分子图像，其可以通过RDKit和Open Babel等软件进行转换。然而，这种类型的图像引入了一个很大的空白区域，没有有效的信息。此外，尺度敏感性是另一个问题，因为所有分子都被转换成相同大小的图像。由于整个分子图像的固定大小，相同原子&#x2F;结构的大小在不同的分子中是振动的。作者回顾了相关试图避免这个问题的图像生成方法。\n3.4 基于3D图的方法\n分子的构象通常包含分子的原子3D坐标，也称为几何数据，可以为分子性质预测提供额外的空间信息。首先要解决的问题是三维分子晶体数据集有限。为了扩大基于几何的方法的应用领域，可以基于二维数据生成构象。RDKit中的MMFF94可用于构象生成。此外，哈密顿神经网络也可以用来预测分子构象，并将预测的三维坐标输入到基于MPNN的分子指纹生成器中用于分子表示。\n3.5 基于3D网格的方法\n3D网格是另一种使用分子几何数据的表示方法，它将每个原子放置在一个或多个网格中。事实上，蛋白质等大分子可以用3D网格更好地表示，在MPP中仍然表现出良好的性能，特别是在某些量子力学特性方面。3D CNN是3D网格数据的最佳选择；因此，为3D CNN创建一个功能更强大、信息更丰富的网格可以提高分子性质预测的性能。\n3.6 基于混合数据的方法和集成学习\n上前文所述的1D、2D和3D表示方法以不同的方式呈现分子，将它们结合起来可以提供分子的多视图。作者回顾了结合多种表示方式的方法，并且总结了集成多个模型的集成学习方法。\n3.7 迁移学习，多任务学习和元学习\n实验数据集的不足是MPP中的另一个问题。作者建议使用迁移学习、多任务学习和元学习来克服这个问题。对于迁移学习学习，模型首先针对某些辅助任务在大数据集上进行训练，从而学习分子的一般表示。然后将所学到的一般表示法用于下游任务（通常具有有限的样本），以传递先验知识。多任务学习可以同时训练所有任务并共享表示，以提高预测的泛化能力。近年来，出现了元学习方法来解决少样本问题，也称为“学习如何学习”。在训练过程中，元学习将训练数据集划分为不同的元任务，学习初始化良好的模型参数，具有很强的泛化能力。通过对新任务进行少量梯度下降来更新模型，以提高模型的性能。\n3.8 分子性质预测中可解释的深度学习方法\n深度学习最有争议的领域是其可解释性。可解释的深度学习方法分为两类：被动和主动。被动方法使用深度学习模型中的参数进行解释，而主动方法改变训练过程以提高模型的可解释性。\n4 分子性质预测的挑战和未来的工作\n作者还讨论了五方面分子性质预测的挑战或未来的工作，包括：\n\n3D数据上的自监督学习方法\n使用经验的图卷积方法\n1D、2D和3D数据融合和选择方法\n元学习\n分子性质预测中深度学习模型的可解释性\n\n5 总结\n在这篇综述中，作者综述了多种类型分子数据的深度学习方法以及新兴的方法，包括迁移学习、元学习等。此外，作者还讨论了深度学习模型中分子的可解释性方法。使用深度学习方法在药物发现方面取得了重大进展。然而，提高分子表示和性质预测的性能、鲁棒性和可解释性仍然面临着更多挑战。\n参考资料\nZhen Li, Mingjian Jiang, Shuang Wang, Shugang Zhang, Deep learning methods for molecular representation and property prediction, Drug Discovery Today, 2022, 103373, ISSN 1359-6446, https://doi.org/10.1016/j.drudis.2022.103373.\n","slug":"2、Drug Discov Today  分子表示与性质预测中的深度学习方法","date":"2023-11-04T11:14:55.000Z","categories_index":"深度学习","tags_index":"深度学习,分子表示,性质预测","author_index":"Sunshine"},{"id":"facebc792a634822fa7e1b5be0ca739a","title":"知识图谱辅助药物发现","content":"知识图谱辅助药物发现COSB 2021 | 知识图谱辅助药物发现 - 知乎 (zhihu.com)1.研究背景研究人员使用知识图谱来显式地集成异构数据，不仅能够保留数据的异构信息，还可以获取实体之间的非结构化语义关系。基于生物医学知识图谱的药物重定位和药物不良反应预测增加了加速药物发现的机会。研究人员通常通过预测已知实体之间的关系来实现药物重定位和不良反应预测。大多数现有工作遵循图1所示的方案。本文总结了知识表示学习的代表性模型，介绍了在药物重定位和药物不良反应预测领域中基于知识图谱的工作，并讨论了药物发现的前景。\n\n2.生物医学知识图谱的构建与嵌入2.1数据集\n生物医学知识图谱的构建依赖于各种数据源，包括非结构化数据库和结构化本体。表1总结了常用数据库的简要描述和标签。每个数据源都有一个特定标签，用来表示数据库中的主要数据类型。例如，DrugBank和SuperTarget主要包含药物性质。研究人员还使用文本挖掘技术从已发表的文献中提取实体和关系。例如，GNBR和DRKG是两个公开的知识图谱，包含从生物医学出版物中提取的信息。\n\n2.2嵌入模型\n研究人员通常利用知识表示学习将知识图谱嵌入到低维向量中以完成预测任务。本文介绍了三类具有代表性的知识图谱嵌入模型，分别是基于翻译、基于张量分解和基于神经网络的嵌入模型。表 2 对这些嵌入模型进行了总结，并提供了相关链接以便研究人员跟进。\n\n2.2.1 基于翻译的模型\n\n2.2.2 基于张量分解的模型\n\n2.2.3 基于神经网络的模型\n嵌入模型可以通过引入神经网络架构将知识图谱的表示编码到具有非线性变换的向量空间中。对于知识表示学习，图神经网络（图2（c））是一种有效的架构，因为它能够获得节点之间潜在的长距离相关性。此外，Word2vec是最常用的知识图谱嵌入架构。这种模型以一个实体作为输入，输出对应多个实体。在训练过程中，实体被初始化为One-hot编码，并被更新为激活权重和当前表示的乘积（图2（c））。\n\n3.基于知识图谱的预测任务3.1药物不良反应预测\n药物不良反应是指不符合预期治疗效果的不良反应，常对患者造成伤害。引起药物不良反应的一个因素是药物之间相互作用导致的多药副作用，另一个因素是药物本身的副作用，例如，患者可能对药物中的某些成分过敏。为了准确地预测新药的不良反应，人们充分利用现有的不良反应相关数据。知识图谱是一种常见的选择，用于集成异构数据和完善潜在信息以便更好地预测不良反应。本节主要介绍了基于知识图谱的药物不良反应预测方法。\n3.2药物重定位\n药物重定位是一种从已批准的药物中寻找治疗新疾病的药物（即识别已知药物的新用途）的策略，它通过识别药物与疾病之间的关联或推断药物与靶点之间的相互作用来实现。因此，预测药物-疾病关联和药物-靶点相互作用是药物发现的关键。本节主要介绍了基于知识图谱的药物重定位方法，还介绍了最新的利用药物重定位为 COVID-19 提供可能的治疗策略的方法。\n4.总结知识图谱有助于有效利用现有的生物医学数据，从而加速数据驱动的药物发现过程。因此，研究人员致力于基于知识图谱嵌入模型将知识图谱引入到药物发现的各种预测问题中。本文中，作者总结了用于构建知识图谱的常用数据库，并概述了药物发现领域的代表性嵌入模型和基于知识图谱的预测方法。最后，作者从生物医药知识图谱、模型设计和预测策略三个方面讨论了药物发现领域中基于知识图谱的工作的当前挑战和未来展望。\n","slug":"1、知识图谱辅助药物发现","date":"2023-11-04T07:31:55.000Z","categories_index":"机器学习","tags_index":"知识图谱,机器学习,深度学习,药物发现","author_index":"Sunshine"},{"id":"ba8ae5d8cc8311504a2de82a7b7acd67","title":"111","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-11-04T07:31:55.000Z","categories_index":"blog","tags_index":"个人建站","author_index":"Sunshine"},{"id":"ba8ae5d8cc8311504a2de82a7b7acd67","title":"111","content":"药物发现中最先进的深度学习算法 - 知乎 (zhihu.com)\n深度学习（DL）的进步，特别是计算机视觉和语言处理方面的进步，重新唤起了CADD研究人员最近对神经网络的兴趣。\nDL架构的出现，以及化学和基因组学数据的激增，导致了临床候选药物有意义的CADD发现。\n一系列的成果表明，人工智能驱动方法的进一步推广和应用可以大大加速新型和改进药物的发现。\n今天，智药局依旧为大家带来发布在_Nature machine intelligence_上的文章。上篇中，我们介绍了GPU如何加速药物发现；这篇内容则介绍制药业最先进的深度学习算法。\n\n面向 CADD 的深度学习架构\n从在现有或合成可行的化学库的中找到应用的判别神经网络，到最近成功的DL生成模型，激发了它们在从头药物设计中的应用，下图描述了常用的最先进的DL架构的一般方案，此外还列举了它们在CADD中的采用情况。\nMLPs多层感知器（MLPs）是完全连接的网络，具有输入、隐藏和输出层以及非线性激活函数（sigmoid、tanh、ReLU等），是DNN的基础。它们的学习能力强，参数数量相对较少，使MLP广泛且成功地应用于药物中的QSAR分析。GPU让MLP模型的成本下降，适用于对CADD产生新影响的大型化学信息学数据集。\nCNNsCNN可以说是最常用的DNN，它以分层原则为指导，并利用小的接受字段来处理输入的本地子部分。CNN一直是图像和视频处理的首选架构，同时它们还能够在生物医学文本分类方面应用。典型的CNN在3D体积（高度、宽度、通道）上运行，基于可学习的内核生成平移不变特征图，并将这些图池化以生成比例和旋转不变输出。\nRNNs计算化学家广泛依赖拓扑指纹，如扩展连通性指纹，或其他用于分子表征的描述符。现在流行的表示是SMILES（分子输入系统），用固定长度的字符串表示非常有用，因为它们可以被视为序列，并在时间网络（如递归神经网络 ）中有效建模。RNN可以看作是具有记忆的马尔可夫链的扩展，这些记忆能够通过其内部状态学习长距离依赖性，从而模拟分子序列中的自回归。\nVAEs变分自编码器（VAE）是深度生成模型，正在彻底改变化学信息学，因为它们能够从观察到的数据中概率性地学习潜在空间，这些数据可以采样以产生具有微调功能特性的新分子。VAEs支持从潜伏空间上的学习分布直接采样，从而产生分子，而无需昂贵的蒙特卡罗采样。这些分子使用训练用于活动预测的支持向量机模型进一步验证，以选择性地设计具有所需特性的化合物。其他研究将VAE与分子图相结合，以产生新的分子。\nGANs最近，生成对抗网络（GAN）的地位已经凸显，成为强大而多样化的深度生成模型。GAN基于生成器和鉴别器之间的对抗博弈。生成器尝试创建新的数据点，鉴别器区分生成器生成的真实和虚假数据点，以获得完美的数据点。\n在 GAN 的实证成功之后，研究人员提出了一些改进和修改，研究了系统生物学和分子药物设计交叉点的基于GAN的生成建模方法。为此，他们使用了条件GAN和Wasserstein GAN的组合，并带有梯度惩罚。GAN还与遗传算法一起被探索，以对抗模式崩溃，从而逐步探索更大的化学空间。\nTransformer近年来Transformer网络越来越广泛，研究人员受到启发，在自然语言处理中用Transformer去探索它训练序列长期依赖性的能力。利用self-attention，有研究成果执行端到端神经回归以预测药物分子和靶蛋白之间的亲和力评分。还有研究引入MolTrans来预测药物与靶标的相互作用，例如Grechishnikova使用Transformer编码器和解码器将靶标特异性分子生成作为氨基酸链与其SMILES表示之间的翻译任务。\nGNNsDeep Graph Library-LifeSci74统一了几项开创性的工作，例如引入了一个与平台无关的API，以便将GNNs轻松集成到生命科学中，特别是药物发现。图形的数学表示简洁地捕获了分子的图形结构，这意味着GNN在CADD中可能有很大的用途。研究表明，在几个基准数据集上，药物的学习图表示优于圆形指纹。其他几项研究表明，当考虑了原子距离等几何特征时，预测性能得到了改善。\n强化学习强化学习是人工智能的一个分支，它通过优化基于奖励和惩罚的政策来模拟决策。随着深度学习的渗透，深度强化学习在CADD中得到了应用，特别是在从头药物设计中，使分子具有所需的化学性质。在GNN上训练的深度强化学习进一步被证明可以提高生成的分子结构的有效性。强化学习能围绕化学特性优化奖励，从而产生有用的线索，同时将药化知识传授给基本上是黑盒的深度学习模型。\n使用 GPU 和 DL 扩大虚拟筛选\n随着配体库的指数级增长，已经包含数百亿个可合成分子，人们越来越有兴趣用DL来扩大传统虚拟筛选的规模。最近开发了许多基于结构的虚拟筛选方法，以有效地筛选数十亿个条目的化学文库。\n例如Autodock-GPU，它允许通过并行化姿势搜索过程，在大型GPU集群—如Summit超级计算机（约27000个GPU）上，每天筛选十亿个分子。因此，这些在高性能计算中利用GPU计算的方法可能有助于从大型，不同的化学库中识别新的先导化合物，或加速其他基于结构的方法，如逆对接。但是，计算的成本也非常高。\n另一方面，最近出现了基于结构的替代虚拟筛选平台，利用DL预测和分子对接来，能够从资源有限的数据库中生成活性化合物。\n常见策略是实现经典计算筛选分数的深度学习仿真器，这些仿真器依赖于比传统对接更高的推理速度。与蛮力方法相比，这些基于深度学习的方法可能使学术研究和中小企业都可以进入化学空间方面发挥重要作用。\nDL 促进开放科学和药物发现的民主化\nDL在CADD中的整合极大地促进了药物发现和开放科学工作的全球民主化。开源深度学习软件包、使用流行的机器学习库简化了深度学习策略与药物发现管线的集成。\n此外，云原生计算和面向微服务的架构中的GPU加速可以使CADD方法免费且广泛可用，有助于标准化计算模块和工具，以及架构，平台和用户界面。\n使用相同算法工具得到的数据能够促进AI的应用，这些平台旨在开放和交叉兼容，并有望加速生物制药领域不同数据源的整合，从研究论文、患者记录、症状和生物医学图像，到基因、蛋白质和候选药物。\n由于法律的复杂性，机构之间共享专有数据仍然是简化药物发现研究的瓶颈。联合学习允许参与机构对各自的未共享数据进行本地训练，经过训练的本地模型将聚合到中央服务器中，以实现更广泛的可访问性。因此，联合学习通过在一定程度上减轻数据交换挑战来支持民主化，尽管有效的模型聚合仍然是一个活跃的研究领域。\n结论和展望\n现代药物发现受益于深度学习模型和GPU并行计算的爆炸式增长。在硬件进步的推动下，DL在从虚拟筛选和QSAR分析到生成药物设计等药物发现问题方面表现出色。\n特别是从头开始的药物设计一直是GPU计算进步的主要受益者之一，因为它利用了大容量和高度参数化的模型。CAS内容库中超过50% 的“化学AI”文档都是在过去 4 年中发布的。 作者预计，GPU架构的日益普及，以及先进的深度学习策略和GPU加速算法的发展，将有助于使药物发现成本下降，并且全球更广泛的科学界都可以使用。\n深度学习算法的另一个关键驱动因素是“大数据”的可用性。 随着基因测序和高通量筛选的日益普及，研究人员可以随时获得大量原始数据。然而，对于监督学习方法至关重要的高质量标记数据的成本仍然很高。因此，数据清理和监管起着重要作用，可以单独定义此类DL应用程序的成功或失败。深入探索集中式、经过处理和标记良好的数据存储库仍然是一个开放的研究领域。\n总体而言，药物发现和机器学习领域的研究人员已经有效地合作确定了CADD子问题和相应的深度学习工具。未来几年这些应用将得到微调和成熟，这种合作将进一步发展到生命科学的其他未被充分探索的领域。因此，联合学习和协作机器学习正在获得越来越多的关注，相信它们将成为民主化药物发现革命的先驱。\n参考链接：https://www.nature.com/articles/s42256-022-00463-x\n关注微信公众号 “智药局”，为你带来最前沿的AI+生命科学资讯、深度洞察。\n","slug":"3、药物发现中最先进的深度学习算法","date":"2023-11-04T07:31:55.000Z","categories_index":"blog","tags_index":"个人建站","author_index":"Sunshine"},{"id":"ba8ae5d8cc8311504a2de82a7b7acd67","title":"111","content":"知识图谱辅助药物发现COSB 2021 | 知识图谱辅助药物发现 - 知乎 (zhihu.com)1.研究背景研究人员使用知识图谱来显式地集成异构数据，不仅能够保留数据的异构信息，还可以获取实体之间的非结构化语义关系。基于生物医学知识图谱的药物重定位和药物不良反应预测增加了加速药物发现的机会。研究人员通常通过预测已知实体之间的关系来实现药物重定位和不良反应预测。大多数现有工作遵循图1所示的方案。本文总结了知识表示学习的代表性模型，介绍了在药物重定位和药物不良反应预测领域中基于知识图谱的工作，并讨论了药物发现的前景。\n\n2.生物医学知识图谱的构建与嵌入2.1数据集\n生物医学知识图谱的构建依赖于各种数据源，包括非结构化数据库和结构化本体。表1总结了常用数据库的简要描述和标签。每个数据源都有一个特定标签，用来表示数据库中的主要数据类型。例如，DrugBank和SuperTarget主要包含药物性质。研究人员还使用文本挖掘技术从已发表的文献中提取实体和关系。例如，GNBR和DRKG是两个公开的知识图谱，包含从生物医学出版物中提取的信息。\n\n2.2嵌入模型\n研究人员通常利用知识表示学习将知识图谱嵌入到低维向量中以完成预测任务。本文介绍了三类具有代表性的知识图谱嵌入模型，分别是基于翻译、基于张量分解和基于神经网络的嵌入模型。表 2 对这些嵌入模型进行了总结，并提供了相关链接以便研究人员跟进。\n\n2.2.1 基于翻译的模型\n\n2.2.2 基于张量分解的模型\n\n2.2.3 基于神经网络的模型\n嵌入模型可以通过引入神经网络架构将知识图谱的表示编码到具有非线性变换的向量空间中。对于知识表示学习，图神经网络（图2（c））是一种有效的架构，因为它能够获得节点之间潜在的长距离相关性。此外，Word2vec是最常用的知识图谱嵌入架构。这种模型以一个实体作为输入，输出对应多个实体。在训练过程中，实体被初始化为One-hot编码，并被更新为激活权重和当前表示的乘积（图2（c））。\n\n3.基于知识图谱的预测任务3.1药物不良反应预测\n药物不良反应是指不符合预期治疗效果的不良反应，常对患者造成伤害。引起药物不良反应的一个因素是药物之间相互作用导致的多药副作用，另一个因素是药物本身的副作用，例如，患者可能对药物中的某些成分过敏。为了准确地预测新药的不良反应，人们充分利用现有的不良反应相关数据。知识图谱是一种常见的选择，用于集成异构数据和完善潜在信息以便更好地预测不良反应。本节主要介绍了基于知识图谱的药物不良反应预测方法。\n3.2药物重定位\n药物重定位是一种从已批准的药物中寻找治疗新疾病的药物（即识别已知药物的新用途）的策略，它通过识别药物与疾病之间的关联或推断药物与靶点之间的相互作用来实现。因此，预测药物-疾病关联和药物-靶点相互作用是药物发现的关键。本节主要介绍了基于知识图谱的药物重定位方法，还介绍了最新的利用药物重定位为 COVID-19 提供可能的治疗策略的方法。\n4.总结知识图谱有助于有效利用现有的生物医学数据，从而加速数据驱动的药物发现过程。因此，研究人员致力于基于知识图谱嵌入模型将知识图谱引入到药物发现的各种预测问题中。本文中，作者总结了用于构建知识图谱的常用数据库，并概述了药物发现领域的代表性嵌入模型和基于知识图谱的预测方法。最后，作者从生物医药知识图谱、模型设计和预测策略三个方面讨论了药物发现领域中基于知识图谱的工作的当前挑战和未来展望。\n","slug":"how to writer blog","date":"2023-11-04T07:31:55.000Z","categories_index":"blog","tags_index":"个人建站","author_index":"Sunshine"},{"id":"ba8ae5d8cc8311504a2de82a7b7acd67","title":"111","content":"药物发现中的分子设计：深度生成模型的全面回顾 - 腾讯云开发者社区-腾讯云 (tencent.com)\n\n\n\n\n\n\n\n\n\n作者 | 李万相 审核 | 付海涛\n今天给大家介绍湖南大学刘元盛老师团队发表在Briefings in Bioinformatics 2021上的一篇文章“Molecular design in drug discovery: a comprehensive review of deep generative models”。文章回顾了深度生成模型，并根据计算机中的分子表征将这些模型分为两类，详细分析这两种经典类型的模型并讨论其优缺点，同时还指出了de novo分子设计的深度生成模型当前面临的挑战。\n1.摘要\n深度生成模型自提出以来一直是深度学习的热潮，这些模型旨在通过拟合数据近似分布来生成新的合成数据，包括图像、视频和文本。在这篇综述中，作者主要关注药物发现中分子生成的深度生成模型，首先介绍了分子的表征方法并总结了常用的数据库，展示了不同表征的优缺点。对于生成模型，作者强调基于de novo分子设计领域的不同表征的最新进展，与最先进模型的比较，进行客观的评价便于读者选择和改进。同时，作者还列举了在该领域中要面临的一些挑战，以促进新研究的发展。\n2.分子表征\n2.1 基于SMILES的表征\n基于序列的表征主要使用线性字符串来表达复合词，它们很容易被计算机系统记忆和处理，一维线性表示目前包括SMILES和国际化学标识符（InCHI）。SMILES是一个ASCII字符串，它使用从分子图到文本的映射算法，其中使用严格的语法简化了化学结构。SMILES形式的分子示例如图中A所示，从分子结构到文本的转换使得SMILES易于被计算机处理，易于用于训练机器学习模型。SMILES既有优点，也有缺点：(1)SMILES未能捕捉到分子结构的相似性，两个相似结构之间的微小变化可能会导致SMILES字符串有很大不同，这导致从生成模型中学习到的潜在空间不平滑。(2)SMILES 字符串是非唯一的，一个分子可以编码成多个SMILES表示。这些问题在目前的工作中或多或少都得到了解决。\n2.2 基于图的表征\nSMILES是从基于图形的分子表示中生成的，结构式常用于表示化学中的分子，因此描述分子结构的更直观方式是分子图。分子图的示例如图中B所示，每个分子都可以表示为一个无向图G，其中节点集V和边集E由原子\n\n3.深层分子生成模型\n3.1 基于SMILES的模型\n基于VAE的生成模型\nVAE通常包含一个编码器和一个解码器，编码器将离散数据映射到一个连续的潜在空间，为了对特定属性执行无约束优化，解码器负责将潜在向量重构为具有化学有效性的SMILES。基于VAE的模型旨在最大化Kullback-Leibler散度可能性的证据下界 (ELBO)。\n基于GAN的生成模型\n在过去的5年中，使用GAN生成具有特定所需特性的新型分子的案例研究取得了里程碑式的进展，尤其是GAN和强化学习的结合。GAN包括一个模仿真实样本的生成器，一个最大程度区分生成器输出和实际样本的判别器，GAN的最终目标是让判别器无法判断生成器的输出是否是假的。\n基于RNN的生成模型\nRNN是连接模型，能够通过节点网络中的循环单元捕获序列的动态，可以轻松处理由序列组成的输入和输出的。近年来，由于RNN的训练困难，人们提出了对网络架构的一些改进，如长短期记忆(LSTM)和门控循环单元 (GRU)。LSTM增加了替代传统单元的记忆单元，解决了RNN训练遇到的困难，GRU的简单性更适合构建更大的网络。\n由于SMILES被视为文本字符串，自然语言处理中的大量模型能够扩展到从头分子设计领域。例如，在未来的研究中，可以将所需特性的分子生成视为一种翻译，可以将特定目标语言（蛋白质序列）翻译成SMILES语言。值得注意的是，尽管近年来基于SMILES的模型激增 ，仍然面临有效性问题，而且SMILES的非结构化性质使得两个相似的分子极有可能完全不同。\n3.2 基于图的模型\n基于VAE的生成模型\n基于VAE的生成模型最具代表性的工作之一是连接树变分自编码器（JT-VAE），JT-VAE从分子的亚结构组装构建块，通过从训练集中分解分子，包括环、官能团和原子。与之前逐节点生成图相比，整个过程分为两个阶段，首先将有效支架及其排列表示为树，然后通过在相交组件之间添加边将整个树集成到图中。这种设计具有三个关键限制，首先，使用JT-VAE进行属性优化更加困难，因为具有相同连接树的两个分子可能对应明显不同的属性；其次，在生成过程中不考虑节点顺序排列会导致耗时；第三，由于现实中药物分子的复杂性，子结构中少于20个原子是不切实际的。\n基于GAN的生成模型\n尽管GAN在某些领域得到了广泛应用，但其在生成分子图方面的发展却是微乎其微的。GAN容易产生模式坍塌，同时由于避免了基于似然的损失函数，GAN使分子优化变得非常稳定，旨在平衡对抗性训练和属性约束。\n基于RNN的生成模型\n基于RNN的生成网络将图的生成建模为一个顺序过程，并在生成图时做出自回归决策。GraphNet是第一个基于RNN的图模型，它基于消息传递神经网络(MPNN)的框架，其本质是在现有图中添加一个新的原子或键。更具体地说：（1）选择是否添加原子（2）计算现有图的概率以确定是否添加新边（3）计算图中的一个节点连接的概率。\n基于流的生成模型\n基于流的生成模型已应用于图像生成，并且最近开始在分子生成领域中获得关注。在标准化流的帮助下，基于流的生成模型明确地学习由可逆变换组成的数据分布，将初始变量作为输入，通过重复使用变量规则的变化将其转换为具有各向同性高斯的变量，这类似于VAE编码器中的推理过程。\n现有的基于图的模型大致可以分为两种类型，一种是顺序迭代过程，另一种是一次性生成，具体可以分为逐原子，基于子图（片段）模型。由于图的优势和图神经网络的发展，基于图的生成模型现在在分子设计中占据主导地位，但仍然存在一些挑战，如随着节点大小的增加，总计算量至少会增加节点数的平方，导致很难获得精确的似然等。因此，应该更好地解决节点排序问题，有利于生成高质量的分子。\n4.总结\n本文中，作者阐述了深层分子生成模型的不同阶段，说明了基于序列和基于图的生成模型的优缺点。分子生成模型的开发方式对药物发现起着重要作用，尽管已经取得了实质性进展，但在提高现有生成模型的性能和改进综合可访问性指标方面仍有很大的空间。这些技术和计算能力的提升有望进一步提高生成具有精心设计的药物特性的分子的质量，并进一步努力以完全自动化的方式加速de novo药物设计。分子生成的这些进展也预示着相关问题（如逆合成）的前景广阔，随着友好和易于使用的自动化工具的发展，化学家和计算机技术人员的协同工作将进一步促进未来的药物发现。\n参考文献\n文章地址\nYu Cheng, Yongshun Gong, Yuansheng Liu, Bosheng Song, Quan Zou, Molecular design in drug discovery: a comprehensive review of deep generative models, Briefings in Bioinformatics, 2021;, bbab344,\nhttps://doi.org/10.1093/bib/bbab344\n","slug":"4、药物发现中的分子设计：深度生成模型的全面回顾","date":"2023-11-04T07:31:55.000Z","categories_index":"blog","tags_index":"个人建站","author_index":"Sunshine"},{"id":"ba8ae5d8cc8311504a2de82a7b7acd67","title":"111","content":"方法模型1.【DL笔记3】一步步用python实现Logistic回归 - 知乎 (zhihu.com)2.【DL碎片4】深度学习中的的超参数调节 - 知乎 (zhihu.com)3.【DL碎片3】神经网络中的激活函数及其对比 - 知乎 (zhihu.com)4.【DL笔记6】从此明白了卷积神经网络（CNN） - 知乎 (zhihu.com)5.A Gentle Introduction to Graph Neural Networks图神经网络论文解读 - 知乎 (zhihu.com)6.图卷积网络(Graph Convolutional Networks, GCN)详细介绍_Worldora-的博客-CSDN博客_图卷积网络7.COSB 2021 | 知识图谱辅助药物发现 - 知乎 (zhihu.com)一、嵌入模型1、基于翻译的模型 2、基于张量分解的模型 3、基于神经网络的模型\n\n1、基于翻译的模型：[[TransE]] [[Translate模型]]总结：由于TransE主要由triple,（h,l,t）,其中h,t为head&#x2F;tail entity，t为两者的关系，即边。训练而成：而因其在低维空间中对于一个h和t只用一个参数表示其关系，因此大幅度的减少了模型的参数。连接预测连接预测通常被称为预测某个实体与另一个给定实体是否具有特定关系的任务。比如，给定h预测 (r,t)或者给定t预测(h, r)，前者表示为(?,r,t)，后者表示为(h,r,?)。例如，(?, 导演,惊魂)，是预测电影的导演，(毒液,导演,?)，就是预测某个电影被某个人导演。这本质上是一个知识图谱的完善的任务。\n推荐系统推荐系统为用户提供他们可能想要购买或查看的物品的一些建议。在不同的推荐策略中，协同过滤技术取得了显著的成功。但是，并不总是有效，因为用户-物品的交互可能非常稀少。在这种情况下，混合推荐系统通常可以取得更好的性能，混合推荐系统将用户-物品的交互作用与用户或物品的辅助信息相结合。\n","slug":"方法模型","date":"2023-11-04T07:31:55.000Z","categories_index":"blog","tags_index":"个人建站","author_index":"Sunshine"},{"id":"ba8ae5d8cc8311504a2de82a7b7acd67","title":"111","content":"4.4筛选研究的生物信息学方法\n4.4.1蛋白同源建模\n同源建模法是预测蛋白结构的首选方法,基于相似的氨基酸序列对应相似的蛋白质结构的原理｡同源建模是虚拟筛选､分子动力学模拟､蛋白空间结构分析等方法的前提,可用于预测PDB数据库中没有晶体结构的蛋白,创建蛋白模型｡如北京望石智慧科技公司网上公布利用蛋白同源建模､计算化学虚拟筛选等技术,发现了20余个可能对SARS-CoV-2病毒RNA聚合酶具有潜在的抑制作用的核苷母核分子｡\n4.4.2分子对接\n指两个或多个分子之间通过几何匹配和能量匹配相互识别找到最佳匹配模式的过程｡分子对接计算以受体活性位点区域为基础,通过空间结构互补和能量最小化原则,搜寻配体与受体是否能产生相互作用以及它们之间的最佳结合模式｡\n4.4.3分子动力学模拟\n分子动力学模拟是分子模拟中最接近实验条件的模拟方法,能够从原子层面给出体系的微观演变过程,直观的展示实验现象发生的机制与规律,促使研究者向着更高效､更经济､更有预见性的方向发展｡模拟使用蛋白质的势能模型,计算机模拟力场能量重复求解蛋白质分子和溶剂分子中原子的牛顿运动方程,构象在模拟中会发生改变,根据热力学定律,系统趋向于自由能最低的状态｡目的在于解决如下问题:(1)比较野生型与突变体蛋白的蛋白特性;(2)配体-受体结合的机制;(3)研究蛋白与膜的作用(脂质力场);(4)蛋白折叠｡\n4.4.4虚拟筛选\n虚拟筛选也称计算机筛选,即在进行生物活性筛选之前,利用计算机上的分子对接软件模拟目标靶点与候选药物之间的相互作用,计算两者之间的亲和力大小,以降低实际筛选化合物数目,同时提高先导化合物发现效率｡虚拟筛选可以分为两类:(1)基于受体的虚拟筛选:从靶蛋白的三维结构出发,研究靶蛋白结合位点的特征性质以及它与小分子化合物之间的相互作用模式;(2)基于配体的虚拟筛选:利用已知活性的小分子化合物,根据化合物的形状相似性或药效团模型在化合物数据库中搜索能够与它匹配的化学分子结构｡\n","slug":"研究策略","date":"2023-11-04T07:31:55.000Z","categories_index":"blog","tags_index":"个人建站","author_index":"Sunshine"}]